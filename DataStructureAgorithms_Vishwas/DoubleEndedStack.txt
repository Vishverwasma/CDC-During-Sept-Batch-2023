DoubleEndedStack :


package DataStructureAgorithms_Vishwas;

import java.util.*;

public class DoubleEndedStack {
    private int []arr;
    private int topA,topB;

    public DoubleEndedStack(){
        arr=new int[15];
        topA=-1;topB=arr.length;
    }
     public DoubleEndedStack(int s){
        arr=new int[s];
        topA=-1;topB=arr.length;
     }
     public int SizeOfArray(){
        return arr.length;
     }
     public boolean isFull(){
        if((topA-topB)==1){
            return true;
        }
        else{
            return false;
        }
     }
     public boolean isEmptyA(){
        if(topA==-1){
            return true;
        }
        else{
            return false;
        }
     }
     public boolean isEmptyB(){
        if(topB==arr.length){
            return true;
        }
        else{
            return false;
        }
     }
     public void pushA(int d){
        if(isFull()){
            System.out.println("\nOverFlow");
            return;
        }
        topA++;
        arr[topA]=d;
     }
    public void pushB(int d){
        if(isFull()){
            System.out.println("\nOverFlow");
            return;
        }
        topB--;
        arr[topB]=d;
    }
    public int popA(){
        int d=arr[arr.length-1];
        if(isEmptyA()){
            System.out.println("\nUnderFlow");
        }
        else{
            d=arr[topA];
            topA--;
        }
        return d;
    }
    public int popB(){
        int d=arr[arr.length-1];
        if(isEmptyB()){
            System.out.println("\nUnderFlow");
        }
        else{
            d=arr[topB];
            topB++;
        }
        return d;
    }
    public int peekA(){
        int d=arr[arr.length-1];
        if(isEmptyA()){
            System.out.println("\nUnderFlow");
        }
        else{
            d=arr[topA];
        }
        return d;
    }
    public int peekB(){
        int d=arr[arr.length-1];
        if(isEmptyB()){
            System.out.println("\nUnderFlow");
        }
        else{
            d=arr[topB];
        }
        return d;
    }
}

-------------------------------------------------------------------

Main : 



package DataStructureAgorithms_Vishwas;
import java.util.*;
public class UserOfDoubleEndedStack {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Size of Array you Wished To Create : ");
        int n=sc.nextInt();
        int ch;
        DoubleEndedStack de=new DoubleEndedStack(n);
        do{
            System.out.println("Menu : \n1.PushA\n2.PushB\n3.PopA\n4.PopB\n5.PeekA\n6.PeekB\n7.Exit");
            ch=sc.nextInt();
            switch (ch){

                case 1:
                    int d=sc.nextInt();
                    de.pushA(d);
                    System.out.println("Size : "+de.SizeOfArray());
                    break;
                case 2:
                    int e=sc.nextInt();
                    de.pushB(e);
                    System.out.println("Size : "+de.SizeOfArray());
                    break;
                case 3:
                    System.out.println(de.popA());
                    System.out.println("Size : "+de.SizeOfArray());
                    break;
                case 4:
                    System.out.println(de.popB());
                    System.out.println("Size : "+de.SizeOfArray());
                    break;
                case 5:
                    System.out.println(de.peekA());
                    System.out.println("Size : "+de.SizeOfArray());
                    break;
                case 6:
                    System.out.println(de.peekB());
                    System.out.println("Size : "+de.SizeOfArray());
                    break;
                default:
                    if(ch==7) {
                        System.out.println("Seems You Opted The Best Options, Go and Smoke as A Treat From Me!");
                    }else {
                        System.out.println("The Value You Entered Is Invalid So I Think You Should Go Take Some Smoke ! ");
                        }ch = 7;
                    break;
            }
        }while(ch!=7);
    }
}
