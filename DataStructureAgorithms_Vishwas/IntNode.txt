IntNode :

package DataStructureAgorithms_Vishwas;

public class IntNode {
    private int data;
    private IntNode next;
    public IntNode(){
        data=0;
        next=null;
    }
    public IntNode(int d){
        data=d;
        next=null;
    }
    public void setData(int d){
        data=d;
    }
    public void setNext(IntNode n){
        next=n;
    }
    public int getData(){
        return data;
    }
    public IntNode getNext(){
        return next;
    }
}


----------------------------------------------------------------------
LinkedList :

______________________________________________________________________
Day02
/*
package DataStructureAgorithms_Vishwas;

public class LinkedList {
    private IntNode head;
    LinkedList(){
         head=null;
    }
    public void insertFirst(int d){
        IntNode newNode=new IntNode(d);
        if(head==null){
            head=newNode;
            return;
        }
        newNode.setNext(head);
        head=newNode;
        return;
    }
    public void insertLast(int d){
        IntNode newNode=new IntNode(d);
        if(head==null){
            head=newNode;
            return;
        }
        IntNode iterator=head;
        while(iterator.getNext()!=null)
            iterator=iterator.getNext();
        iterator.setNext(newNode);
        return;
    }
    public void Display(){
        if(head==null){
            System.out.println("List Is Empty ! ");
            return;
        }
        IntNode iterator =head;
        while(iterator!=null){
            System.out.print(iterator.getData()+" ");
            iterator=iterator.getNext();
        }
        return;
    }
}
*/____________________________________________________________________
Day03

package DataStructureAgorithms_Vishwas;

public class LinkedList {
    private IntNode head;
    LinkedList(){
         head=null;
    }
//    public void insertFirst(int d){
//        IntNode newNode=new IntNode(d);
//        if(head==null){
//            head=newNode;
//            return;
//        }
//        newNode.setNext(head);
//        head=newNode;
//        return;
//    }
//    public void insertLast(int d){
//        IntNode newNode=new IntNode(d);
//        if(head==null){
//            head=newNode;
//            return;
//        }
//        IntNode itr=head;
//        while(itr.getNext()!=null)
//            itr=itr.getNext();
//        itr.setNext(newNode);
//        return;
//    }
    public void Display(){
        if(head==null){
            System.out.println("List Is Empty ! ");
            return;
        }
        IntNode itr =head;
        while(itr!=null){
            System.out.print(itr.getData()+" ");
            itr=itr.getNext();
        }
        return;
    }
    public void insertFirst(int d){
        IntNode newNode=new IntNode(d);
        if(head==null){
            head=newNode;
            return;
        }
        newNode.setNext(head);
        head=newNode;
        return;
    }
    public void insertLast(int d){
        IntNode newNode=new IntNode(d);
        if(head==null){
            head=newNode;
            return;
        }
        IntNode itr=head;
        while(itr.getNext()!=null){
            itr=itr.getNext();
        }
        itr.setNext(newNode);
    }
    public void insertByPosition(int d,int position){
        IntNode newNode=new IntNode(d);
        if(head==null){
            head=newNode;
            return;
        }
        if(position==1){
            newNode.setNext(head);
            head=newNode;
            return;
        }
        int i;
        IntNode itr=head;
        for(i=1;i<position-1 && itr.getNext()!=null;i++){
            itr=itr.getNext();
        }
        newNode.setNext(itr.getNext());
        itr.setNext(newNode);
    }
    public int deleteFirst(){
        IntNode deletor;
        int d;
        if(head==null){
            System.out.println("NullList ! ");
            return -999;
        }
        deletor=head;
        head=head.getNext();
        d= deletor.getData();
        deletor=null;
        return d;
    }
    public int deleteLast(){
        IntNode deletor;
        int d;
        if(head==null){
            System.out.println("Empty/Null List");
            return -999;
        }
        if(head.getNext()==null){
            d=head.getData();
            deletor=head;
            head=null;
            deletor=null;
            return d;
        }
        IntNode itr=head;
        while(itr.getNext().getNext()!=null){
            itr=itr.getNext();
        }
        deletor=itr.getNext();
        d=deletor.getData();
        itr.setNext(null);
        deletor=null;
        return d;
    }
    public int deleteByPosition(int position){
        int d;
        IntNode delete;
        if(head==null){
            System.out.println("List Is Empty");
            return -999;
        }
        if(position==1){
            delete=head;
            head=head.getNext();
            d=delete.getData();
            delete=null;
            return d;
        }
        if(head.getNext()==null){
            System.out.println("Inalid Position !");
            return -999;
        }
        int i;
        IntNode itr;
        for(i=1,itr=head;i<position-1 && itr.getNext()!=null ;i++,itr=itr.getNext());
        if(itr.getNext()==null){
            System.out.println("Invalid Position");
            return -999;
        }
        delete=itr.getNext();
        d=delete.getData();
        itr.setNext(delete.getNext());
        return d;
    }
    public String to_String(){
        String str=new String();
        if(head==null){
            str=str+"List Is Empty";
            return str;
        }
        IntNode itr=head;
        str=str+"List...";
        while(itr!=null){
            str=str+itr.getData()+"->";
            itr=itr.getNext();
        }
        str=str+"Null\n";
        return str;
    }
    public void insertSorted(int d){
        IntNode newNode=new IntNode(d);
        if((head==null)||(d<head.getData())){
            newNode.setNext(head);
            head=newNode;
            return;
        }
        IntNode itr=head;
        while(itr.getNext()!=null && d>itr.getNext().getData()){
            itr= itr;
        }
        newNode.setNext(itr.getNext());
        itr.setNext(newNode);
        return;
    }
    public void reverse(){
        IntNode itr=head;
        IntNode prev= null;
        IntNode next;
        while(itr!=null){
            next=itr.getNext();
            itr.setNext(prev);
            itr=next;
        }
        head=prev;
    }
    //MyTries....

    public int CountElements(){
        int c=0;
        if(head==null){
            System.out.println("0 , as This Linked List Is Empty !");
            return 0;
        }
//        IntNode itr=head,next;
//        while(itr!=null){
//           next=itr
//        }
        IntNode itr=head;
        IntNode prev= null;
        IntNode next;
        while(itr!=null){
            next=itr.getNext();
            itr.setNext(prev);
            itr=next;
            c=c+1;
        }
        return c;
    }
}



----------------------------------------------------------------------
Main Function :

package DataStructureAgorithms_Vishwas;
import org.w3c.dom.ls.LSOutput;

import java.util.*;
public class UserLinkedList {
    public static void main(String[] args) {
/*______________________________________________________________________________
Day02


        LinkedList l = new LinkedList();
        Scanner sc = new Scanner(System.in);
        int ch;
        do {
            System.out.println("Menu \n1.InsertFront\n2.InsertLast\n3.Exit");
            System.out.println("What Do You Wish To Do : ");
            ch=sc.nextInt();
            int i, val, lav;
            switch(ch) {
                case 1:
                System.out.println("Number of Time (Keep It Short If You Just Wanna Test This Program) You Wanna Insert Some Input : ");
                int n = sc.nextInt();
                System.out.println("The Values To Insert : ");
                for (i = 0; i < n; i++) {
                    val = sc.nextInt();
                    l.insertFirst(val);
                }
                System.out.println("the Elements In Your Queue Comes Out to BE : ");
                l.Display();
                    System.out.println();
                break;
                case 2:
                System.out.println("The Number (Same Please Do Keep It Short ) Of Items You Wish To Insert in Last : ");
                int m = sc.nextInt();
                System.out.println("Enter The Values : ");
                for (i = 0; i < m; i++) {
                    lav = sc.nextInt();
                    l.insertLast(lav);
                }
                System.out.println("the Elements In Your Queue Coj=mes Out to BE : ");
                l.Display();
                    System.out.println();
                break;
                default:
                    System.out.println("If You pressed 3 or Other Value It means You Wanna Quit, But its Not A Good Bye, see You Soon Warrior 1");
                    ch=3;
                    System.out.println();
                    break;
            }
        }while(ch!=3);
______________________________________________________________________________
Day 03

        LinkedList l=new LinkedList();
        Scanner sc=new Scanner(System.in);
        int ch,data,pos,cnt;
        do{
            System.out.println("Menu : \n1.InserFirst\n2.InsertLast\n3.InsertByPosition\n4.InsertBeforeData\n5.DeleteFirst\n6.DeleteLast\n7.DeleteByPosition\n8.CountNumberOfNodes\n9.SortedInsert\n10.Display\n11.Exit\n");
            System.out.println("What Do You Wish To Opt For : ");
            ch=sc.nextInt();
            switch(ch){
                case 1:
                    System.out.println("You Have Opted To : Insert at First");
                    System.out.println("Enter Data You Wish To Insert : ");
                    data= sc.nextInt();
                    l.insertFirst(data);
                    break;
                case 2:
                    System.out.println("You Have Opted To : Insert at Last");
                    System.out.println("Enter Data You Wish To Insert : ");
                    data= sc.nextInt();
                    l.insertLast(data);
                    break;
                case 3:
                    System.out.println("You Have Opted To : Insert By Position");
                    System.out.println("Enter Data You Wish To Insert : ");
                    data= sc.nextInt();
                    System.out.println("Enter Position You Wish To Enter At : ");
                    pos= sc.nextInt();
                    l.insertByPosition(data,pos);
                    break;
                case 4:
                    System.out.println("You Have Opted To : Insert Before Data");

                    break;
                case 5:
                    System.out.println("You Have Opted To : Delete First");
                    data=l.deleteFirst();
                    System.out.println("Delete Data Is : "+data);
                    break;
                case 6:
                    System.out.println("You Have Opted To : Delete Last");
                    data=l.deleteLast();
                    System.out.println("Delete Data Is : "+data);
                    break;
                case 7:
                    System.out.println("You Have Opted To : Delete By Position");
                    System.out.println("Enter Position You Wish To Delete Value From : ");
                    pos= sc.nextInt();
                    data=l.deleteByPosition(pos);
                    System.out.println("Delete Data Is : "+data);
                    break;
                case 8:
                    System.out.println("You Have Opted To : Count Number Of Elements");
                    l.CountElements();
                    break;
                case 9:
                    System.out.println("You Have Opted To : Sorted Insert");
                    System.out.println("Enter Data You Wish To Insert : ");
                    data= sc.nextInt();
                    l.insertSorted(data);
                    break;
                case 10:
                    System.out.println("You Have Opted To : Display");
                    l.Display();
                    System.out.println("You have Opted To : String Display");
                    System.out.println(l.to_String());
                    break;
                default :
                    System.out.println("You Have Opted For 11th Choice or Have Opted For Choice Out Of Range");
                    ch=11;
                    break;
            }
        }while(ch!=11);
        System.out.println("See You Soon ! Sayonara ! ");

    }
}